pico-8 cartridge // http://www.pico-8.com
version 15
__lua__
-- palette
-- droune

function _init()

end
-->8
-- update

function _update60()
 local dt = 1/60
end

-->8
-- draw

function draw_bg(dt)
 cls()
 --pal(11,0)
 sspr(12*8,0,4*8,4*8,0,0,4*4*8,4*4*8)
 pal()
 local a=0.5
 shprint("toto",64,10,4,a)
 shprint("totoasdf",64,20,4,a)
 shprint("totos",64,30,4,a)
 shprint("totofdfdfdf",64,40,4,a)
end

function _draw()
 local dt = 1/30
 draw_bg(dt)
end
-->8
-- utils

-- copies props to obj
-- if obj is nil, a new
-- object will be created,
-- so set(nil,{...}) copies
-- the object
function set(obj,props)
 obj=obj or {}
 for k,v in pairs(props) do
  obj[k]=v
 end
 return obj
end

-- calls fn(character,index)
-- for each character in str
function each_char(str,fn)
 for i=1,#str do
  fn(sub(str,i,i),i)
 end
end

-- helper, calls a given func
-- with a table of arguments
-- if fn is nil, returns the
-- arguments themselves - handy
-- for the e(...) serialization
-- trick
function call(fn,a)
 return fn
  and fn(a[1],a[2],a[3],a[4],a[5])
  or a
end

--lets us define constant
--objects with a single
--token by using multiline
--strings
function ob(str,props)
 local result,s,n,inpar=
  {},1,1,0
 each_char(str,function(c,i)
  local sc,nxt=sub(str,s,s),i+1
  if c=="(" then
   inpar+=1
  elseif c==")" then
   inpar-=1
  elseif inpar==0 then
   if c=="=" then
    n,s=sub(str,s,i-1),nxt
   elseif c=="," and s<i then
	   result[n]=sc=='"'
	    and sub(str,s+1,i-2)
	    or sub(str,s+1,s+1)=="("
	    and call(obfn[sc],ob(
	     sub(str,s+2,i-2)..","
	    ))
	    or sc!="f"
	    and band(sub(str,s,i-1)+0,0xffff.fffe)
	   s=nxt
	   if (type(n)=="number") n+=1
   elseif sc!='"' and c==" " or c=="\n" then
    s=nxt
   end
  end
 end)
 return set(props,result)
end

--lets us define large lookup
--tables using one token, via
--string parsing and multiline
--strings
-- multilines are [[ ]]
-- each line is one object
function lut(str)
 local result,s={},1
 each_char(str,function(c,i)
  if c=="\n" then
   add(result,ob(sub(str,s,i)))
   s=i
  end
 end)
 return result
end

------------------------------
-- pretty text
-- draws shadows around the text
-- a: 1   = align right
-- a: 0.5 = align middle
-- a: 0   = align left
------------------------------

shpr=lut([[
 x=0,y=-1,c=0,
 x=0,y=1,c=0,
 x=1,y=0,c=0,
 x=-1,y=0,c=0,
 x=-1,y=-1,c=0,
 x=-1,y=1,c=0,
 x=1,y=1,c=0,
 x=1,y=-1,c=0,
 x=0,y=0,c=1,
]])
function shprint(s,x,y,c,a)
 x-=a*4*#(s.."")
 for d in all(shpr) do
  print(s,x+d.x,y+d.y,c*d.c)
 end
end


-------------------------------
-- palette effects
-------------------------------

function init_palettes(n)
 local a=0x5000
 for p=0,n do
  local pri,sec=p,8
  if p>=24 then
   pri=13+p/8
   sec+=p%8
  end
  for c=0,15 do
   local v=sget(sec,sget(pri,c))
   if (c==3) v+=0x80
   poke(a,v)
   a+=1
  end
 end
end

function set_palette(no)
 memcpy(0x5f00,
  0x5000+shl(flr(no or 8),4),
  16)
end

function dim_object(o,mx)
 set_palette(scr.psh+
  mid((o.pos.y-lgt.pos.y)*0.4+o.z*0.5,
      0,mx)
 )
end

__gfx__
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
221100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbeeeeebbb
333110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbe55555eeb
422110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbb111111111bbbbbe555555eb
551110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbb188888888111bbbee55555eb
66d510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbb11888888888811bbbee5555ee
776d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbb18888888888881bbbbeee555e
882210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbb188888888888881bbbbbee55e
942210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbb1188888888888881bbbbbbe55e
a94210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbb1888888888888881bbbbbbe55e
bb3310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbb1888cc8888888881bbbbbbe5eb
ccd510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbb1ccc77cc88889911bbbbbee5eb
d55110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbb1c77777cc999d199bbbbbe55eb
ee8210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbcc7777779cddd1aa9bbbbe55eb
f94210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbc117779900c11aaaa9bbbeeebb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbcc3311790111caaaaa9bbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbc33333911222caaaaa9bbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbc333339222222caaaa9bbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbcc33339222222caaaa99bbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbcc33339222222caaaaa9bbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbc333339922222caaaaa9bbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbc333333922222caaaaa99bbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbc333333392222caaaaa9bbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbc333333339922caaaa99bbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbcc3333333339c9aaaa9bbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbc333333333cc999999bbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbc333333cccbbbbbbbbbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbccccccbbbbbbbbbbbbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
